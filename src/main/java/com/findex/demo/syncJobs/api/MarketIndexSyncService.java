package com.findex.demo.syncJobs.api;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.findex.demo.global.error.CustomException;
import com.findex.demo.global.error.ErrorCode;
import com.findex.demo.indexInfo.domain.entity.IndexInfo;
import com.findex.demo.indexInfo.repository.IndexInfoRepository;
import com.findex.demo.syncJobs.api.ExternalIndexInfoDto;
import com.findex.demo.syncJobs.domain.dto.OpenApiSyncResultResponse;
import com.findex.demo.syncJobs.api.OpenApIIndexInfoMapper;
import java.net.URI;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Slf4j
@Service
@RequiredArgsConstructor
public class MarketIndexSyncService {

    private final IndexInfoRepository indexInfoRepository;
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    @Value("${external.market-index.service-key}")
    private String serviceKey;

    @Value("${external.market-index.base-url}")
    private String baseUrl;

    @Value("${external.market-index.num-of-rows:100}")
    private int numOfRows;

    private static final int TOTAL_COUNT = 100;
    private static final int TOTAL_PAGES = (int) Math.ceil((double) TOTAL_COUNT / 100);

    public OpenApiSyncResultResponse fetchAndStoreMarketIndices() {
        Set<String> seenKeys = new HashSet<>();
        int createdCount = 0;
        int updatedCount = 0;
        int skippedCount = 0;

        for (int page = 1; page <= TOTAL_PAGES; page++) {
            try {
                String apiUrl = baseUrl +
                    "?serviceKey=" + serviceKey +
                    "&resultType=json" +
                    "&pageNo=" + page +
                    "&numOfRows=" + numOfRows;

                log.info("üì§ [Page {}] ÏöîÏ≤≠ URI: {}", page, apiUrl);

                URI uri = new URI(apiUrl);
                String responseString = restTemplate.getForObject(uri, String.class);

                JsonNode itemNode = objectMapper.readTree(responseString)
                    .path("response").path("body").path("items").path("item");

                if (itemNode.isMissingNode() || itemNode.isNull()) {
                    log.warn("‚ö†Ô∏è [Page {}] 'item' ÎÖ∏Îìú ÏóÜÏùå, Í±¥ÎÑàÎúÄ", page);
                    continue;
                }

                if (itemNode.isArray()) {
                    log.info("‚úÖ [Page {}] 'item' Î∞∞Ïó¥ Ï¥ù {}Í±¥", page, itemNode.size());
                    for (JsonNode item : itemNode) {
                        int result = processItem(item, seenKeys);
                        if (result == 1) createdCount++;
                        else if (result == 2) updatedCount++;
                        else skippedCount++;
                    }
                } else {
                    log.info("‚úÖ [Page {}] Îã®Ïùº 'item' Ï≤òÎ¶¨", page);
                    int result = processItem(itemNode, seenKeys);
                    if (result == 1) createdCount++;
                    else if (result == 2) updatedCount++;
                    else skippedCount++;
                }

            } catch (Exception e) {
                log.error("‚ùå ÏòàÏô∏ Î∞úÏÉù: {}", e.getMessage(), e);
                throw new CustomException(ErrorCode.PATH_NOT_FOUND, "API Ìò∏Ï∂ú ÎòêÎäî ÌååÏã± Ï§ë Ïò§Î•ò Î∞úÏÉù: page " + page);
            }
        }

        log.info("üèÅ Ï†ÑÏ≤¥ Ïó∞Îèô ÏôÑÎ£å: Ïã†Í∑ú {}, ÏàòÏ†ï {}, Î≥ÄÎèôÏóÜÏùå {}", createdCount, updatedCount, skippedCount);

        return OpenApiSyncResultResponse.builder()
            .createdCount(createdCount)
            .updatedCount(updatedCount)
            .skippedCount(skippedCount)
            .totalCount(createdCount + updatedCount + skippedCount)
            .build();
    }

    /**
     * @return 1 = Ïã†Í∑ú Ï†ÄÏû• / 2 = ÏóÖÎç∞Ïù¥Ìä∏ / 0 = Í±¥ÎÑàÎúÄ
     */
    private int processItem(JsonNode item, Set<String> seenKeys) {
        String indexClassification = item.path("idxCsf").asText();
        String indexName = item.path("idxNm").asText();
        String key = indexClassification + "|" + indexName;

        if (!seenKeys.add(key)) {
            log.debug("üîÅ Ï§ëÎ≥µ ÏßÄÏàò Í±¥ÎÑàÎúÄ: {}", key);
            return 0;
        }

        ExternalIndexInfoDto dto = ExternalIndexInfoDto.builder()
            .indexClassification(indexClassification)
            .indexName(indexName)
            .employedItemCount(item.path("epyItmsCnt").asInt())
            .basePointInTimeRaw(item.path("basPntm").asText())
            .basId(item.path("basIdx").asInt())
            .build();

        try {
            Optional<IndexInfo> existing = indexInfoRepository
                .findByIndexClassificationAndIndexName(dto.indexClassification(), dto.indexName());

            if (existing.isPresent()) {
                IndexInfo indexInfo = existing.get();
                indexInfo.updateFromDto(dto);
                indexInfoRepository.save(indexInfo);
                log.info("üîÅ ÏàòÏ†ï ÏôÑÎ£å: {}", indexInfo.getIndexName());
                return 2;
            } else {
                IndexInfo indexInfo = OpenApIIndexInfoMapper.toIndexInfo(dto);
                indexInfoRepository.save(indexInfo);
                log.info("‚úÖ Ïã†Í∑ú Ï†ÄÏû• ÏôÑÎ£å: {}", indexInfo.getIndexName());
                return 1;
            }

        } catch (Exception e) {
            log.error("‚ùå Ï†ÄÏû• Ï§ë ÏòàÏô∏ Î∞úÏÉù: {}", e.getMessage(), e);
            return 0;
        }
    }
}
